[{"request":[{"type":"table","title":"Details","tableData":[{"name":"Method","value":"GET","selector":"request.method"},{"name":"URL","value":"","selector":"request.targetUri"},{"name":"Path","value":"/doc/manual/html/index.html","selector":"request.path"},{"name":"Body Size (bytes)","value":0,"selector":"request.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":authority","value":"localhost:3000","selector":"request.headers[\":authority\"]"},{"name":":method","value":"GET","selector":"request.headers[\":method\"]"},{"name":":path","value":"/doc/manual/html/index.html","selector":"request.headers[\":path\"]"},{"name":":scheme","value":"http","selector":"request.headers[\":scheme\"]"},{"name":"Accept","value":"*/*","selector":"request.headers[\"Accept\"]"},{"name":"Accept-Encoding","value":"gzip, deflate","selector":"request.headers[\"Accept-Encoding\"]"},{"name":"User-Agent","value":"nghttp2/0.5.2-DEV","selector":"request.headers[\"User-Agent\"]"}],"body":""},{"type":"table","title":"Query String","tableData":null,"body":""}],"response":[{"type":"table","title":"Details","tableData":[{"name":"Status","value":200,"selector":"response.status"},{"name":"Status Text","value":"OK","selector":"response.statusText"},{"name":"Body Size (bytes)","value":30156,"selector":"response.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":status","value":"200","selector":"response.headers[\":status\"]"},{"name":"Cache-Control","value":"max-age=3600","selector":"response.headers[\"Cache-Control\"]"},{"name":"Content-Length","value":"30156","selector":"response.headers[\"Content-Length\"]"},{"name":"Date","value":"Sat, 02 Aug 2014 10:50:25 GMT","selector":"response.headers[\"Date\"]"},{"name":"Last-Modified","value":"Sat, 02 Aug 2014 07:58:59 GMT","selector":"response.headers[\"Last-Modified\"]"},{"name":"Server","value":"nghttpd nghttp2/0.5.2-DEV","selector":"response.headers[\"Server\"]"}],"body":""},{"type":"body","title":"Body","tableData":null,"encoding":"base64","body":"","selector":"response.content.text"}],"event":null,"data":null},{"request":[{"type":"table","title":"Details","tableData":[{"name":"Method","value":"GET","selector":"request.method"},{"name":"URL","value":"","selector":"request.targetUri"},{"name":"Path","value":"/doc/manual/html/_static/css/theme.css","selector":"request.path"},{"name":"Body Size (bytes)","value":0,"selector":"request.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":authority","value":"localhost:3000","selector":"request.headers[\":authority\"]"},{"name":":method","value":"GET","selector":"request.headers[\":method\"]"},{"name":":path","value":"/doc/manual/html/_static/css/theme.css","selector":"request.headers[\":path\"]"},{"name":":scheme","value":"http","selector":"request.headers[\":scheme\"]"},{"name":"Accept","value":"*/*","selector":"request.headers[\"Accept\"]"},{"name":"Accept-Encoding","value":"gzip, deflate","selector":"request.headers[\"Accept-Encoding\"]"},{"name":"User-Agent","value":"nghttp2/0.5.2-DEV","selector":"request.headers[\"User-Agent\"]"}],"body":""},{"type":"table","title":"Query String","tableData":null,"body":""}],"response":[{"type":"table","title":"Details","tableData":[{"name":"Status","value":200,"selector":"response.status"},{"name":"Status Text","value":"OK","selector":"response.statusText"},{"name":"Body Size (bytes)","value":114124,"selector":"response.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":status","value":"200","selector":"response.headers[\":status\"]"},{"name":"Cache-Control","value":"max-age=3600","selector":"response.headers[\"Cache-Control\"]"},{"name":"Content-Length","value":"114124","selector":"response.headers[\"Content-Length\"]"},{"name":"Date","value":"Sat, 02 Aug 2014 10:50:25 GMT","selector":"response.headers[\"Date\"]"},{"name":"Last-Modified","value":"Thu, 15 May 2014 15:34:22 GMT","selector":"response.headers[\"Last-Modified\"]"},{"name":"Server","value":"nghttpd nghttp2/0.5.2-DEV","selector":"response.headers[\"Server\"]"}],"body":""},{"type":"body","title":"Body","tableData":null,"encoding":"base64","body":"","selector":"response.content.text"}],"event":null,"data":null},{"request":[{"type":"table","title":"Details","tableData":[{"name":"Method","value":"GET","selector":"request.method"},{"name":"URL","value":"","selector":"request.targetUri"},{"name":"Path","value":"/doc/manual/html/_static/js/theme.js","selector":"request.path"},{"name":"Body Size (bytes)","value":0,"selector":"request.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":authority","value":"localhost:3000","selector":"request.headers[\":authority\"]"},{"name":":method","value":"GET","selector":"request.headers[\":method\"]"},{"name":":path","value":"/doc/manual/html/_static/js/theme.js","selector":"request.headers[\":path\"]"},{"name":":scheme","value":"http","selector":"request.headers[\":scheme\"]"},{"name":"Accept","value":"*/*","selector":"request.headers[\"Accept\"]"},{"name":"Accept-Encoding","value":"gzip, deflate","selector":"request.headers[\"Accept-Encoding\"]"},{"name":"User-Agent","value":"nghttp2/0.5.2-DEV","selector":"request.headers[\"User-Agent\"]"}],"body":""},{"type":"table","title":"Query String","tableData":null,"body":""}],"response":[{"type":"table","title":"Details","tableData":[{"name":"Status","value":200,"selector":"response.status"},{"name":"Status Text","value":"OK","selector":"response.statusText"},{"name":"Body Size (bytes)","value":2236,"selector":"response.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":status","value":"200","selector":"response.headers[\":status\"]"},{"name":"Cache-Control","value":"max-age=3600","selector":"response.headers[\"Cache-Control\"]"},{"name":"Content-Length","value":"2236","selector":"response.headers[\"Content-Length\"]"},{"name":"Date","value":"Sat, 02 Aug 2014 10:50:25 GMT","selector":"response.headers[\"Date\"]"},{"name":"Last-Modified","value":"Thu, 15 May 2014 15:34:22 GMT","selector":"response.headers[\"Last-Modified\"]"},{"name":"Server","value":"nghttpd nghttp2/0.5.2-DEV","selector":"response.headers[\"Server\"]"}],"body":""},{"type":"body","title":"Body","tableData":null,"encoding":"base64","body":"JCggZG9jdW1lbnQgKS5yZWFkeShmdW5jdGlvbigpIHsKICAgIC8vIFNoaWZ0IG5hdiBpbiBtb2JpbGUgd2hlbiBjbGlja2luZyB0aGUgbWVudS4KICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICJbZGF0YS10b2dnbGU9J3d5LW5hdi10b3AnXSIsIGZ1bmN0aW9uKCkgewogICAgICAkKCJbZGF0YS10b2dnbGU9J3d5LW5hdi1zaGlmdCddIikudG9nZ2xlQ2xhc3MoInNoaWZ0Iik7CiAgICAgICQoIltkYXRhLXRvZ2dsZT0ncnN0LXZlcnNpb25zJ10iKS50b2dnbGVDbGFzcygic2hpZnQiKTsKICAgIH0pOwogICAgLy8gQ2xvc2UgbWVudSB3aGVuIHlvdSBjbGljayBhIGxpbmsuCiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAiLnd5LW1lbnUtdmVydGljYWwgLmN1cnJlbnQgdWwgbGkgYSIsIGZ1bmN0aW9uKCkgewogICAgICAkKCJbZGF0YS10b2dnbGU9J3d5LW5hdi1zaGlmdCddIikucmVtb3ZlQ2xhc3MoInNoaWZ0Iik7CiAgICAgICQoIltkYXRhLXRvZ2dsZT0ncnN0LXZlcnNpb25zJ10iKS50b2dnbGVDbGFzcygic2hpZnQiKTsKICAgIH0pOwogICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgIltkYXRhLXRvZ2dsZT0ncnN0LWN1cnJlbnQtdmVyc2lvbiddIiwgZnVuY3Rpb24oKSB7CiAgICAgICQoIltkYXRhLXRvZ2dsZT0ncnN0LXZlcnNpb25zJ10iKS50b2dnbGVDbGFzcygic2hpZnQtdXAiKTsKICAgIH0pOyAgCiAgICAvLyBNYWtlIHRhYmxlcyByZXNwb25zaXZlCiAgICAkKCJ0YWJsZS5kb2N1dGlsczpub3QoLmZpZWxkLWxpc3QpIikud3JhcCgiPGRpdiBjbGFzcz0nd3ktdGFibGUtcmVzcG9uc2l2ZSc+PC9kaXY+Iik7Cn0pOwoKd2luZG93LlNwaGlueFJ0ZFRoZW1lID0gKGZ1bmN0aW9uIChqcXVlcnkpIHsKICAgIHZhciBzdGlja3lOYXYgPSAoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBuYXZCYXIsCiAgICAgICAgICAgIHdpbiwKICAgICAgICAgICAgc3RpY2t5TmF2Q3NzQ2xhc3MgPSAnc3RpY2t5bmF2JywKICAgICAgICAgICAgYXBwbHlTdGlja05hdiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmIChuYXZCYXIuaGVpZ2h0KCkgPD0gd2luLmhlaWdodCgpKSB7CiAgICAgICAgICAgICAgICAgICAgbmF2QmFyLmFkZENsYXNzKHN0aWNreU5hdkNzc0NsYXNzKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgbmF2QmFyLnJlbW92ZUNsYXNzKHN0aWNreU5hdkNzc0NsYXNzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZW5hYmxlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgYXBwbHlTdGlja05hdigpOwogICAgICAgICAgICAgICAgd2luLm9uKCdyZXNpemUnLCBhcHBseVN0aWNrTmF2KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG5hdkJhciA9IGpxdWVyeSgnbmF2Lnd5LW5hdi1zaWRlOmZpcnN0Jyk7CiAgICAgICAgICAgICAgICB3aW4gICAgPSBqcXVlcnkod2luZG93KTsKICAgICAgICAgICAgfTsKICAgICAgICBqcXVlcnkoaW5pdCk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgZW5hYmxlIDogZW5hYmxlCiAgICAgICAgfTsKICAgIH0oKSk7CiAgICByZXR1cm4gewogICAgICAgIFN0aWNreU5hdiA6IHN0aWNreU5hdgogICAgfTsKfSgkKSk7Cg==","selector":"response.content.text"}],"event":null,"data":null},{"request":[{"type":"table","title":"Details","tableData":[{"name":"Method","value":"GET","selector":"request.method"},{"name":"URL","value":"","selector":"request.targetUri"},{"name":"Path","value":"/doc/manual/html/_static/doctools.js","selector":"request.path"},{"name":"Body Size (bytes)","value":0,"selector":"request.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":authority","value":"localhost:3000","selector":"request.headers[\":authority\"]"},{"name":":method","value":"GET","selector":"request.headers[\":method\"]"},{"name":":path","value":"/doc/manual/html/_static/doctools.js","selector":"request.headers[\":path\"]"},{"name":":scheme","value":"http","selector":"request.headers[\":scheme\"]"},{"name":"Accept","value":"*/*","selector":"request.headers[\"Accept\"]"},{"name":"Accept-Encoding","value":"gzip, deflate","selector":"request.headers[\"Accept-Encoding\"]"},{"name":"User-Agent","value":"nghttp2/0.5.2-DEV","selector":"request.headers[\"User-Agent\"]"}],"body":""},{"type":"table","title":"Query String","tableData":null,"body":""}],"response":[{"type":"table","title":"Details","tableData":[{"name":"Status","value":200,"selector":"response.status"},{"name":"Status Text","value":"OK","selector":"response.statusText"},{"name":"Body Size (bytes)","value":8908,"selector":"response.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":status","value":"200","selector":"response.headers[\":status\"]"},{"name":"Cache-Control","value":"max-age=3600","selector":"response.headers[\"Cache-Control\"]"},{"name":"Content-Length","value":"8908","selector":"response.headers[\"Content-Length\"]"},{"name":"Date","value":"Sat, 02 Aug 2014 10:50:25 GMT","selector":"response.headers[\"Date\"]"},{"name":"Last-Modified","value":"Sat, 01 Mar 2014 07:18:19 GMT","selector":"response.headers[\"Last-Modified\"]"},{"name":"Server","value":"nghttpd nghttp2/0.5.2-DEV","selector":"response.headers[\"Server\"]"}],"body":""},{"type":"body","title":"Body","tableData":null,"encoding":"base64","body":"","selector":"response.content.text"}],"event":null,"data":null},{"request":[{"type":"table","title":"Details","tableData":[{"name":"Method","value":"GET","selector":"request.method"},{"name":"URL","value":"","selector":"request.targetUri"},{"name":"Path","value":"/doc/manual/html/_static/underscore.js","selector":"request.path"},{"name":"Body Size (bytes)","value":0,"selector":"request.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":authority","value":"localhost:3000","selector":"request.headers[\":authority\"]"},{"name":":method","value":"GET","selector":"request.headers[\":method\"]"},{"name":":path","value":"/doc/manual/html/_static/underscore.js","selector":"request.headers[\":path\"]"},{"name":":scheme","value":"http","selector":"request.headers[\":scheme\"]"},{"name":"Accept","value":"*/*","selector":"request.headers[\"Accept\"]"},{"name":"Accept-Encoding","value":"gzip, deflate","selector":"request.headers[\"Accept-Encoding\"]"},{"name":"User-Agent","value":"nghttp2/0.5.2-DEV","selector":"request.headers[\"User-Agent\"]"}],"body":""},{"type":"table","title":"Query String","tableData":null,"body":""}],"response":[{"type":"table","title":"Details","tableData":[{"name":"Status","value":200,"selector":"response.status"},{"name":"Status Text","value":"OK","selector":"response.statusText"},{"name":"Body Size (bytes)","value":55224,"selector":"response.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":status","value":"200","selector":"response.headers[\":status\"]"},{"name":"Cache-Control","value":"max-age=3600","selector":"response.headers[\"Cache-Control\"]"},{"name":"Content-Length","value":"55224","selector":"response.headers[\"Content-Length\"]"},{"name":"Date","value":"Sat, 02 Aug 2014 10:50:25 GMT","selector":"response.headers[\"Date\"]"},{"name":"Last-Modified","value":"Wed, 30 Jan 2013 02:13:24 GMT","selector":"response.headers[\"Last-Modified\"]"},{"name":"Server","value":"nghttpd nghttp2/0.5.2-DEV","selector":"response.headers[\"Server\"]"}],"body":""},{"type":"body","title":"Body","tableData":null,"encoding":"base64","body":"Ly8gICAgIFVuZGVyc2NvcmUuanMgMS40LjQKLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnCi8vICAgICAoYykgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBJbmMuCi8vICAgICBVbmRlcnNjb3JlIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLgoKKGZ1bmN0aW9uKCkgewoKICAvLyBCYXNlbGluZSBzZXR1cAogIC8vIC0tLS0tLS0tLS0tLS0tCgogIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZ2xvYmFsYCBvbiB0aGUgc2VydmVyLgogIHZhciByb290ID0gdGhpczsKCiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS4KICB2YXIgcHJldmlvdXNVbmRlcnNjb3JlID0gcm9vdC5fOwoKICAvLyBFc3RhYmxpc2ggdGhlIG9iamVjdCB0aGF0IGdldHMgcmV0dXJuZWQgdG8gYnJlYWsgb3V0IG9mIGEgbG9vcCBpdGVyYXRpb24uCiAgdmFyIGJyZWFrZXIgPSB7fTsKCiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjoKICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBGdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7CgogIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLgogIHZhciBwdXNoICAgICAgICAgICAgID0gQXJyYXlQcm90by5wdXNoLAogICAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSwKICAgICAgY29uY2F0ICAgICAgICAgICA9IEFycmF5UHJvdG8uY29uY2F0LAogICAgICB0b1N0cmluZyAgICAgICAgID0gT2JqUHJvdG8udG9TdHJpbmcsCiAgICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTsKCiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlCiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuCiAgdmFyCiAgICBuYXRpdmVGb3JFYWNoICAgICAgPSBBcnJheVByb3RvLmZvckVhY2gsCiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCwKICAgIG5hdGl2ZVJlZHVjZSAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlLAogICAgbmF0aXZlUmVkdWNlUmlnaHQgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodCwKICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLAogICAgbmF0aXZlRXZlcnkgICAgICAgID0gQXJyYXlQcm90by5ldmVyeSwKICAgIG5hdGl2ZVNvbWUgICAgICAgICA9IEFycmF5UHJvdG8uc29tZSwKICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZiwKICAgIG5hdGl2ZUxhc3RJbmRleE9mICA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2YsCiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LAogICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsCiAgICBuYXRpdmVCaW5kICAgICAgICAgPSBGdW5jUHJvdG8uYmluZDsKCiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuCiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHsKICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqOwogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTsKICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7CiAgfTsKCiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGgKICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlIG9sZCBgcmVxdWlyZSgpYCBBUEkuIElmIHdlJ3JlIGluCiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLAogIC8vIGZvciBDbG9zdXJlIENvbXBpbGVyICJhZHZhbmNlZCIgbW9kZS4KICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXzsKICAgIH0KICAgIGV4cG9ydHMuXyA9IF87CiAgfSBlbHNlIHsKICAgIHJvb3QuXyA9IF87CiAgfQoKICAvLyBDdXJyZW50IHZlcnNpb24uCiAgXy5WRVJTSU9OID0gJzEuNC40JzsKCiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC4KICAvLyBIYW5kbGVzIG9iamVjdHMgd2l0aCB0aGUgYnVpbHQtaW4gYGZvckVhY2hgLCBhcnJheXMsIGFuZCByYXcgb2JqZWN0cy4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLgogIHZhciBlYWNoID0gXy5lYWNoID0gXy5mb3JFYWNoID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm47CiAgICBpZiAobmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCkgewogICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7CiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKF8uaGFzKG9iaiwga2V5KSkgewogICAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07CgogIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0b3IgdG8gZWFjaCBlbGVtZW50LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBtYXBgIGlmIGF2YWlsYWJsZS4KICBfLm1hcCA9IF8uY29sbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHZhciByZXN1bHRzID0gW107CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzOwogICAgaWYgKG5hdGl2ZU1hcCAmJiBvYmoubWFwID09PSBuYXRpdmVNYXApIHJldHVybiBvYmoubWFwKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgcmVzdWx0c1tyZXN1bHRzLmxlbmd0aF0gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIHZhciByZWR1Y2VFcnJvciA9ICdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJzsKCiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLAogIC8vIG9yIGBmb2xkbGAuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGByZWR1Y2VgIGlmIGF2YWlsYWJsZS4KICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIHsKICAgIHZhciBpbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7CiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdOwogICAgaWYgKG5hdGl2ZVJlZHVjZSAmJiBvYmoucmVkdWNlID09PSBuYXRpdmVSZWR1Y2UpIHsKICAgICAgaWYgKGNvbnRleHQpIGl0ZXJhdG9yID0gXy5iaW5kKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgICAgcmV0dXJuIGluaXRpYWwgPyBvYmoucmVkdWNlKGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2UoaXRlcmF0b3IpOwogICAgfQogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAoIWluaXRpYWwpIHsKICAgICAgICBtZW1vID0gdmFsdWU7CiAgICAgICAgaW5pdGlhbCA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWVtbyA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgbWVtbywgdmFsdWUsIGluZGV4LCBsaXN0KTsKICAgICAgfQogICAgfSk7CiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpOwogICAgcmV0dXJuIG1lbW87CiAgfTsKCiAgLy8gVGhlIHJpZ2h0LWFzc29jaWF0aXZlIHZlcnNpb24gb2YgcmVkdWNlLCBhbHNvIGtub3duIGFzIGBmb2xkcmAuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZVJpZ2h0YCBpZiBhdmFpbGFibGUuCiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7CiAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyOwogICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTsKICAgIGlmIChuYXRpdmVSZWR1Y2VSaWdodCAmJiBvYmoucmVkdWNlUmlnaHQgPT09IG5hdGl2ZVJlZHVjZVJpZ2h0KSB7CiAgICAgIGlmIChjb250ZXh0KSBpdGVyYXRvciA9IF8uYmluZChpdGVyYXRvciwgY29udGV4dCk7CiAgICAgIHJldHVybiBpbml0aWFsID8gb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yLCBtZW1vKSA6IG9iai5yZWR1Y2VSaWdodChpdGVyYXRvcik7CiAgICB9CiAgICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDsKICAgIGlmIChsZW5ndGggIT09ICtsZW5ndGgpIHsKICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTsKICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7CiAgICB9CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGluZGV4ID0ga2V5cyA/IGtleXNbLS1sZW5ndGhdIDogLS1sZW5ndGg7CiAgICAgIGlmICghaW5pdGlhbCkgewogICAgICAgIG1lbW8gPSBvYmpbaW5kZXhdOwogICAgICAgIGluaXRpYWwgPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIG1lbW8gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG1lbW8sIG9ialtpbmRleF0sIGluZGV4LCBsaXN0KTsKICAgICAgfQogICAgfSk7CiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpOwogICAgcmV0dXJuIG1lbW87CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLgogIF8uZmluZCA9IF8uZGV0ZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgdmFyIHJlc3VsdDsKICAgIGFueShvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSB7CiAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBmaWx0ZXJgIGlmIGF2YWlsYWJsZS4KICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLgogIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0czsKICAgIGlmIChuYXRpdmVGaWx0ZXIgJiYgb2JqLmZpbHRlciA9PT0gbmF0aXZlRmlsdGVyKSByZXR1cm4gb2JqLmZpbHRlcihpdGVyYXRvciwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHNbcmVzdWx0cy5sZW5ndGhdID0gdmFsdWU7CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH07CgogIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuCiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgICAgcmV0dXJuICFpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7CiAgICB9LCBjb250ZXh0KTsKICB9OwoKICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC4KICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZXZlcnlgIGlmIGF2YWlsYWJsZS4KICAvLyBBbGlhc2VkIGFzIGBhbGxgLgogIF8uZXZlcnkgPSBfLmFsbCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGl0ZXJhdG9yIHx8IChpdGVyYXRvciA9IF8uaWRlbnRpdHkpOwogICAgdmFyIHJlc3VsdCA9IHRydWU7CiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7CiAgICBpZiAobmF0aXZlRXZlcnkgJiYgb2JqLmV2ZXJ5ID09PSBuYXRpdmVFdmVyeSkgcmV0dXJuIG9iai5ldmVyeShpdGVyYXRvciwgY29udGV4dCk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIGlmICghKHJlc3VsdCA9IHJlc3VsdCAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjsKICAgIH0pOwogICAgcmV0dXJuICEhcmVzdWx0OwogIH07CgogIC8vIERldGVybWluZSBpZiBhdCBsZWFzdCBvbmUgZWxlbWVudCBpbiB0aGUgb2JqZWN0IG1hdGNoZXMgYSB0cnV0aCB0ZXN0LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBzb21lYCBpZiBhdmFpbGFibGUuCiAgLy8gQWxpYXNlZCBhcyBgYW55YC4KICB2YXIgYW55ID0gXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpdGVyYXRvciB8fCAoaXRlcmF0b3IgPSBfLmlkZW50aXR5KTsKICAgIHZhciByZXN1bHQgPSBmYWxzZTsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDsKICAgIGlmIChuYXRpdmVTb21lICYmIG9iai5zb21lID09PSBuYXRpdmVTb21lKSByZXR1cm4gb2JqLnNvbWUoaXRlcmF0b3IsIGNvbnRleHQpOwogICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICBpZiAocmVzdWx0IHx8IChyZXN1bHQgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjsKICAgIH0pOwogICAgcmV0dXJuICEhcmVzdWx0OwogIH07CgogIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgKHVzaW5nIGA9PT1gKS4KICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlYC4KICBfLmNvbnRhaW5zID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCB0YXJnZXQpIHsKICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZhbHNlOwogICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgb2JqLmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHJldHVybiBvYmouaW5kZXhPZih0YXJnZXQpICE9IC0xOwogICAgcmV0dXJuIGFueShvYmosIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdGFyZ2V0OwogICAgfSk7CiAgfTsKCiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uCiAgXy5pbnZva2UgPSBmdW5jdGlvbihvYmosIG1ldGhvZCkgewogICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7CiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gKGlzRnVuYyA/IG1ldGhvZCA6IHZhbHVlW21ldGhvZF0pLmFwcGx5KHZhbHVlLCBhcmdzKTsKICAgIH0pOwogIH07CgogIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuCiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7CiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSl7IHJldHVybiB2YWx1ZVtrZXldOyB9KTsKICB9OwoKICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzCiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy4KICBfLndoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycywgZmlyc3QpIHsKICAgIGlmIChfLmlzRW1wdHkoYXR0cnMpKSByZXR1cm4gZmlyc3QgPyBudWxsIDogW107CiAgICByZXR1cm4gX1tmaXJzdCA/ICdmaW5kJyA6ICdmaWx0ZXInXShvYmosIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBhdHRycykgewogICAgICAgIGlmIChhdHRyc1trZXldICE9PSB2YWx1ZVtrZXldKSByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9KTsKICB9OwoKICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0CiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy4KICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHsKICAgIHJldHVybiBfLndoZXJlKG9iaiwgYXR0cnMsIHRydWUpOwogIH07CgogIC8vIFJldHVybiB0aGUgbWF4aW11bSBlbGVtZW50IG9yIChlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS4KICAvLyBDYW4ndCBvcHRpbWl6ZSBhcnJheXMgb2YgaW50ZWdlcnMgbG9uZ2VyIHRoYW4gNjUsNTM1IGVsZW1lbnRzLgogIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTgwNzk3CiAgXy5tYXggPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHsKICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIG9iaik7CiAgICB9CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gLUluZmluaXR5OwogICAgdmFyIHJlc3VsdCA9IHtjb21wdXRlZCA6IC1JbmZpbml0eSwgdmFsdWU6IC1JbmZpbml0eX07CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7CiAgICAgIGNvbXB1dGVkID49IHJlc3VsdC5jb21wdXRlZCAmJiAocmVzdWx0ID0ge3ZhbHVlIDogdmFsdWUsIGNvbXB1dGVkIDogY29tcHV0ZWR9KTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdC52YWx1ZTsKICB9OwoKICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuCiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHsKICAgICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KE1hdGgsIG9iaik7CiAgICB9CiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gSW5maW5pdHk7CiAgICB2YXIgcmVzdWx0ID0ge2NvbXB1dGVkIDogSW5maW5pdHksIHZhbHVlOiBJbmZpbml0eX07CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7CiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7CiAgICAgIGNvbXB1dGVkIDwgcmVzdWx0LmNvbXB1dGVkICYmIChyZXN1bHQgPSB7dmFsdWUgOiB2YWx1ZSwgY29tcHV0ZWQgOiBjb21wdXRlZH0pOwogICAgfSk7CiAgICByZXR1cm4gcmVzdWx0LnZhbHVlOwogIH07CgogIC8vIFNodWZmbGUgYW4gYXJyYXkuCiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgcmFuZDsKICAgIHZhciBpbmRleCA9IDA7CiAgICB2YXIgc2h1ZmZsZWQgPSBbXTsKICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICByYW5kID0gXy5yYW5kb20oaW5kZXgrKyk7CiAgICAgIHNodWZmbGVkW2luZGV4IC0gMV0gPSBzaHVmZmxlZFtyYW5kXTsKICAgICAgc2h1ZmZsZWRbcmFuZF0gPSB2YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIHNodWZmbGVkOwogIH07CgogIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGxvb2t1cCBpdGVyYXRvcnMuCiAgdmFyIGxvb2t1cEl0ZXJhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUgOiBmdW5jdGlvbihvYmopeyByZXR1cm4gb2JqW3ZhbHVlXTsgfTsKICB9OwoKICAvLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0b3IuCiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0KSB7CiAgICB2YXIgaXRlcmF0b3IgPSBsb29rdXBJdGVyYXRvcih2YWx1ZSk7CiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkgewogICAgICByZXR1cm4gewogICAgICAgIHZhbHVlIDogdmFsdWUsCiAgICAgICAgaW5kZXggOiBpbmRleCwKICAgICAgICBjcml0ZXJpYSA6IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KQogICAgICB9OwogICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkgewogICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7CiAgICAgIHZhciBiID0gcmlnaHQuY3JpdGVyaWE7CiAgICAgIGlmIChhICE9PSBiKSB7CiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7CiAgICAgICAgaWYgKGEgPCBiIHx8IGIgPT09IHZvaWQgMCkgcmV0dXJuIC0xOwogICAgICB9CiAgICAgIHJldHVybiBsZWZ0LmluZGV4IDwgcmlnaHQuaW5kZXggPyAtMSA6IDE7CiAgICB9KSwgJ3ZhbHVlJyk7CiAgfTsKCiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdXNlZCBmb3IgYWdncmVnYXRlICJncm91cCBieSIgb3BlcmF0aW9ucy4KICB2YXIgZ3JvdXAgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0LCBiZWhhdmlvcikgewogICAgdmFyIHJlc3VsdCA9IHt9OwogICAgdmFyIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IodmFsdWUgfHwgXy5pZGVudGl0eSk7CiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7CiAgICAgIHZhciBrZXkgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgb2JqKTsKICAgICAgYmVoYXZpb3IocmVzdWx0LCBrZXksIHZhbHVlKTsKICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlCiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uCiAgXy5ncm91cEJ5ID0gZnVuY3Rpb24ob2JqLCB2YWx1ZSwgY29udGV4dCkgewogICAgcmV0dXJuIGdyb3VwKG9iaiwgdmFsdWUsIGNvbnRleHQsIGZ1bmN0aW9uKHJlc3VsdCwga2V5LCB2YWx1ZSkgewogICAgICAoXy5oYXMocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0gOiAocmVzdWx0W2tleV0gPSBbXSkpLnB1c2godmFsdWUpOwogICAgfSk7CiAgfTsKCiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzCiAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlCiAgLy8gY3JpdGVyaW9uLgogIF8uY291bnRCeSA9IGZ1bmN0aW9uKG9iaiwgdmFsdWUsIGNvbnRleHQpIHsKICAgIHJldHVybiBncm91cChvYmosIHZhbHVlLCBjb250ZXh0LCBmdW5jdGlvbihyZXN1bHQsIGtleSkgewogICAgICBpZiAoIV8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0gPSAwOwogICAgICByZXN1bHRba2V5XSsrOwogICAgfSk7CiAgfTsKCiAgLy8gVXNlIGEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IHRoZSBzbWFsbGVzdCBpbmRleCBhdCB3aGljaAogIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC4KICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIGl0ZXJhdG9yID0gaXRlcmF0b3IgPT0gbnVsbCA/IF8uaWRlbnRpdHkgOiBsb29rdXBJdGVyYXRvcihpdGVyYXRvcik7CiAgICB2YXIgdmFsdWUgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9iaik7CiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGFycmF5Lmxlbmd0aDsKICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7CiAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7CiAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgYXJyYXlbbWlkXSkgPCB2YWx1ZSA/IGxvdyA9IG1pZCArIDEgOiBoaWdoID0gbWlkOwogICAgfQogICAgcmV0dXJuIGxvdzsKICB9OwoKICAvLyBTYWZlbHkgY29udmVydCBhbnl0aGluZyBpdGVyYWJsZSBpbnRvIGEgcmVhbCwgbGl2ZSBhcnJheS4KICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHsKICAgIGlmICghb2JqKSByZXR1cm4gW107CiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7CiAgICBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpOwogICAgcmV0dXJuIF8udmFsdWVzKG9iaik7CiAgfTsKCiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LgogIF8uc2l6ZSA9IGZ1bmN0aW9uKG9iaikgewogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDsKICAgIHJldHVybiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDsKICB9OwoKICAvLyBBcnJheSBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0KCiAgLy8gR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBOCiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVjawogIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC4KICBfLmZpcnN0ID0gXy5oZWFkID0gXy50YWtlID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7CiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDsKICAgIHJldHVybiAobiAhPSBudWxsKSAmJiAhZ3VhcmQgPyBzbGljZS5jYWxsKGFycmF5LCAwLCBuKSA6IGFycmF5WzBdOwogIH07CgogIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvbgogIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluCiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoCiAgLy8gYF8ubWFwYC4KICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHsKICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBhcnJheS5sZW5ndGggLSAoKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbikpOwogIH07CgogIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE4KICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC4KICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwOwogICAgaWYgKChuICE9IG51bGwpICYmICFndWFyZCkgewogICAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgTWF0aC5tYXgoYXJyYXkubGVuZ3RoIC0gbiwgMCkpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdOwogICAgfQogIH07CgogIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC4KICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVybgogIC8vIHRoZSByZXN0IE4gdmFsdWVzIGluIHRoZSBhcnJheS4gVGhlICoqZ3VhcmQqKgogIC8vIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC4KICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHsKICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAobiA9PSBudWxsKSB8fCBndWFyZCA/IDEgOiBuKTsKICB9OwoKICAvLyBUcmltIG91dCBhbGwgZmFsc3kgdmFsdWVzIGZyb20gYW4gYXJyYXkuCiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgXy5pZGVudGl0eSk7CiAgfTsKCiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLgogIHZhciBmbGF0dGVuID0gZnVuY3Rpb24oaW5wdXQsIHNoYWxsb3csIG91dHB1dCkgewogICAgZWFjaChpbnB1dCwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICBzaGFsbG93ID8gcHVzaC5hcHBseShvdXRwdXQsIHZhbHVlKSA6IGZsYXR0ZW4odmFsdWUsIHNoYWxsb3csIG91dHB1dCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvdXRwdXQ7CiAgfTsKCiAgLy8gUmV0dXJuIGEgY29tcGxldGVseSBmbGF0dGVuZWQgdmVyc2lvbiBvZiBhbiBhcnJheS4KICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykgewogICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIFtdKTsKICB9OwoKICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS4KICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkgewogICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICB9OwoKICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeQogIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS4KICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLgogIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRvciwgY29udGV4dCkgewogICAgaWYgKF8uaXNGdW5jdGlvbihpc1NvcnRlZCkpIHsKICAgICAgY29udGV4dCA9IGl0ZXJhdG9yOwogICAgICBpdGVyYXRvciA9IGlzU29ydGVkOwogICAgICBpc1NvcnRlZCA9IGZhbHNlOwogICAgfQogICAgdmFyIGluaXRpYWwgPSBpdGVyYXRvciA/IF8ubWFwKGFycmF5LCBpdGVyYXRvciwgY29udGV4dCkgOiBhcnJheTsKICAgIHZhciByZXN1bHRzID0gW107CiAgICB2YXIgc2VlbiA9IFtdOwogICAgZWFjaChpbml0aWFsLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHsKICAgICAgaWYgKGlzU29ydGVkID8gKCFpbmRleCB8fCBzZWVuW3NlZW4ubGVuZ3RoIC0gMV0gIT09IHZhbHVlKSA6ICFfLmNvbnRhaW5zKHNlZW4sIHZhbHVlKSkgewogICAgICAgIHNlZW4ucHVzaCh2YWx1ZSk7CiAgICAgICAgcmVzdWx0cy5wdXNoKGFycmF5W2luZGV4XSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mCiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuCiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIF8udW5pcShjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgYXJndW1lbnRzKSk7CiAgfTsKCiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZQogIC8vIHBhc3NlZC1pbiBhcnJheXMuCiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkgewogICAgdmFyIHJlc3QgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICByZXR1cm4gXy5maWx0ZXIoXy51bmlxKGFycmF5KSwgZnVuY3Rpb24oaXRlbSkgewogICAgICByZXR1cm4gXy5ldmVyeShyZXN0LCBmdW5jdGlvbihvdGhlcikgewogICAgICAgIHJldHVybiBfLmluZGV4T2Yob3RoZXIsIGl0ZW0pID49IDA7CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLgogIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uCiAgXy5kaWZmZXJlbmNlID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgIHZhciByZXN0ID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTsgfSk7CiAgfTsKCiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZQogIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLgogIF8uemlwID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgIHZhciBsZW5ndGggPSBfLm1heChfLnBsdWNrKGFyZ3MsICdsZW5ndGgnKSk7CiAgICB2YXIgcmVzdWx0cyA9IG5ldyBBcnJheShsZW5ndGgpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICByZXN1bHRzW2ldID0gXy5wbHVjayhhcmdzLCAiIiArIGkpOwogICAgfQogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgLy8gQ29udmVydHMgbGlzdHMgaW50byBvYmplY3RzLiBQYXNzIGVpdGhlciBhIHNpbmdsZSBhcnJheSBvZiBgW2tleSwgdmFsdWVdYAogIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZgogIC8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy4KICBfLm9iamVjdCA9IGZ1bmN0aW9uKGxpc3QsIHZhbHVlcykgewogICAgaWYgKGxpc3QgPT0gbnVsbCkgcmV0dXJuIHt9OwogICAgdmFyIHJlc3VsdCA9IHt9OwogICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICBpZiAodmFsdWVzKSB7CiAgICAgICAgcmVzdWx0W2xpc3RbaV1dID0gdmFsdWVzW2ldOwogICAgICB9IGVsc2UgewogICAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwbHkgdXMgd2l0aCBpbmRleE9mIChJJ20gbG9va2luZyBhdCB5b3UsICoqTVNJRSoqKSwKICAvLyB3ZSBuZWVkIHRoaXMgZnVuY3Rpb24uIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4KICAvLyBpdGVtIGluIGFuIGFycmF5LCBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LgogIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBpbmRleE9mYCBpZiBhdmFpbGFibGUuCiAgLy8gSWYgdGhlIGFycmF5IGlzIGxhcmdlIGFuZCBhbHJlYWR5IGluIHNvcnQgb3JkZXIsIHBhc3MgYHRydWVgCiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC4KICBfLmluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgaXNTb3J0ZWQpIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7CiAgICB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7CiAgICBpZiAoaXNTb3J0ZWQpIHsKICAgICAgaWYgKHR5cGVvZiBpc1NvcnRlZCA9PSAnbnVtYmVyJykgewogICAgICAgIGkgPSAoaXNTb3J0ZWQgPCAwID8gTWF0aC5tYXgoMCwgbCArIGlzU29ydGVkKSA6IGlzU29ydGVkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpID0gXy5zb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7CiAgICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xOwogICAgICB9CiAgICB9CiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBhcnJheS5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtLCBpc1NvcnRlZCk7CiAgICBmb3IgKDsgaSA8IGw7IGkrKykgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9OwoKICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgbGFzdEluZGV4T2ZgIGlmIGF2YWlsYWJsZS4KICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb20pIHsKICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7CiAgICB2YXIgaGFzSW5kZXggPSBmcm9tICE9IG51bGw7CiAgICBpZiAobmF0aXZlTGFzdEluZGV4T2YgJiYgYXJyYXkubGFzdEluZGV4T2YgPT09IG5hdGl2ZUxhc3RJbmRleE9mKSB7CiAgICAgIHJldHVybiBoYXNJbmRleCA/IGFycmF5Lmxhc3RJbmRleE9mKGl0ZW0sIGZyb20pIDogYXJyYXkubGFzdEluZGV4T2YoaXRlbSk7CiAgICB9CiAgICB2YXIgaSA9IChoYXNJbmRleCA/IGZyb20gOiBhcnJheS5sZW5ndGgpOwogICAgd2hpbGUgKGktLSkgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mCiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWUKICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLgogIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkgewogICAgICBzdG9wID0gc3RhcnQgfHwgMDsKICAgICAgc3RhcnQgPSAwOwogICAgfQogICAgc3RlcCA9IGFyZ3VtZW50c1syXSB8fCAxOwoKICAgIHZhciBsZW4gPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7CiAgICB2YXIgaWR4ID0gMDsKICAgIHZhciByYW5nZSA9IG5ldyBBcnJheShsZW4pOwoKICAgIHdoaWxlKGlkeCA8IGxlbikgewogICAgICByYW5nZVtpZHgrK10gPSBzdGFydDsKICAgICAgc3RhcnQgKz0gc3RlcDsKICAgIH0KCiAgICByZXR1cm4gcmFuZ2U7CiAgfTsKCiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cywKICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmCiAgLy8gYXZhaWxhYmxlLgogIF8uYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQpIHsKICAgIGlmIChmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQgJiYgbmF0aXZlQmluZCkgcmV0dXJuIG5hdGl2ZUJpbmQuYXBwbHkoZnVuYywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTsKICAgIH07CiAgfTsKCiAgLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0cwogIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LgogIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHsKICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTsKICAgIH07CiAgfTsKCiAgLy8gQmluZCBhbGwgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0CiAgLy8gYWxsIGNhbGxiYWNrcyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuCiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgZnVuY3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSBmdW5jcyA9IF8uZnVuY3Rpb25zKG9iaik7CiAgICBlYWNoKGZ1bmNzLCBmdW5jdGlvbihmKSB7IG9ialtmXSA9IF8uYmluZChvYmpbZl0sIG9iaik7IH0pOwogICAgcmV0dXJuIG9iajsKICB9OwoKICAvLyBNZW1vaXplIGFuIGV4cGVuc2l2ZSBmdW5jdGlvbiBieSBzdG9yaW5nIGl0cyByZXN1bHRzLgogIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikgewogICAgdmFyIG1lbW8gPSB7fTsKICAgIGhhc2hlciB8fCAoaGFzaGVyID0gXy5pZGVudGl0eSk7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBrZXkgPSBoYXNoZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIF8uaGFzKG1lbW8sIGtleSkgPyBtZW1vW2tleV0gOiAobWVtb1trZXldID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsKICAgIH07CiAgfTsKCiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxscwogIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC4KICBfLmRlbGF5ID0gZnVuY3Rpb24oZnVuYywgd2FpdCkgewogICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7CiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpeyByZXR1cm4gZnVuYy5hcHBseShudWxsLCBhcmdzKTsgfSwgd2FpdCk7CiAgfTsKCiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzCiAgLy8gY2xlYXJlZC4KICBfLmRlZmVyID0gZnVuY3Rpb24oZnVuYykgewogICAgcmV0dXJuIF8uZGVsYXkuYXBwbHkoXywgW2Z1bmMsIDFdLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpKTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2UKICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4KICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCkgewogICAgdmFyIGNvbnRleHQsIGFyZ3MsIHRpbWVvdXQsIHJlc3VsdDsKICAgIHZhciBwcmV2aW91cyA9IDA7CiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgcHJldmlvdXMgPSBuZXcgRGF0ZTsKICAgICAgdGltZW91dCA9IG51bGw7CiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICB9OwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgbm93ID0gbmV3IERhdGU7CiAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTsKICAgICAgY29udGV4dCA9IHRoaXM7CiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCkgewogICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgICB0aW1lb3V0ID0gbnVsbDsKICAgICAgICBwcmV2aW91cyA9IG5vdzsKICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0KSB7CiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CiAgfTsKCiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdAogIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3IKICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGUKICAvLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLgogIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHsKICAgIHZhciB0aW1lb3V0LCByZXN1bHQ7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsKICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGltZW91dCA9IG51bGw7CiAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgIH07CiAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0OwogICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTsKICAgICAgaWYgKGNhbGxOb3cpIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogIH07CgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvdwogIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uCiAgXy5vbmNlID0gZnVuY3Rpb24oZnVuYykgewogICAgdmFyIHJhbiA9IGZhbHNlLCBtZW1vOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICBpZiAocmFuKSByZXR1cm4gbWVtbzsKICAgICAgcmFuID0gdHJ1ZTsKICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgZnVuYyA9IG51bGw7CiAgICAgIHJldHVybiBtZW1vOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCwKICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kCiAgLy8gY29uZGl0aW9uYWxseSBleGVjdXRlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi4KICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBhcmdzID0gW2Z1bmNdOwogICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7CiAgICAgIHJldHVybiB3cmFwcGVyLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgfTsKICB9OwoKICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaAogIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuCiAgXy5jb21wb3NlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzOwogICAgICBmb3IgKHZhciBpID0gZnVuY3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICBhcmdzID0gW2Z1bmNzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpXTsKICAgICAgfQogICAgICByZXR1cm4gYXJnc1swXTsKICAgIH07CiAgfTsKCiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIGFmdGVyIGJlaW5nIGNhbGxlZCBOIHRpbWVzLgogIF8uYWZ0ZXIgPSBmdW5jdGlvbih0aW1lcywgZnVuYykgewogICAgaWYgKHRpbWVzIDw9IDApIHJldHVybiBmdW5jKCk7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIGlmICgtLXRpbWVzIDwgMSkgewogICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgIH07CiAgfTsKCiAgLy8gT2JqZWN0IEZ1bmN0aW9ucwogIC8vIC0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gUmV0cmlldmUgdGhlIG5hbWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuCiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYAogIF8ua2V5cyA9IG5hdGl2ZUtleXMgfHwgZnVuY3Rpb24ob2JqKSB7CiAgICBpZiAob2JqICE9PSBPYmplY3Qob2JqKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBvYmplY3QnKTsKICAgIHZhciBrZXlzID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSBrZXlzW2tleXMubGVuZ3RoXSA9IGtleTsKICAgIHJldHVybiBrZXlzOwogIH07CgogIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy4KICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikgewogICAgdmFyIHZhbHVlcyA9IFtdOwogICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkgdmFsdWVzLnB1c2gob2JqW2tleV0pOwogICAgcmV0dXJuIHZhbHVlczsKICB9OwoKICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy4KICBfLnBhaXJzID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgcGFpcnMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHBhaXJzLnB1c2goW2tleSwgb2JqW2tleV1dKTsKICAgIHJldHVybiBwYWlyczsKICB9OwoKICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuCiAgXy5pbnZlcnQgPSBmdW5jdGlvbihvYmopIHsKICAgIHZhciByZXN1bHQgPSB7fTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHJlc3VsdFtvYmpba2V5XV0gPSBrZXk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC4KICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYAogIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgbmFtZXMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTsKICAgIH0KICAgIHJldHVybiBuYW1lcy5zb3J0KCk7CiAgfTsKCiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuCiAgXy5leHRlbmQgPSBmdW5jdGlvbihvYmopIHsKICAgIGVhY2goc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCBmdW5jdGlvbihzb3VyY2UpIHsKICAgICAgaWYgKHNvdXJjZSkgewogICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7CiAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy4KICBfLnBpY2sgPSBmdW5jdGlvbihvYmopIHsKICAgIHZhciBjb3B5ID0ge307CiAgICB2YXIga2V5cyA9IGNvbmNhdC5hcHBseShBcnJheVByb3RvLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpOwogICAgZWFjaChrZXlzLCBmdW5jdGlvbihrZXkpIHsKICAgICAgaWYgKGtleSBpbiBvYmopIGNvcHlba2V5XSA9IG9ialtrZXldOwogICAgfSk7CiAgICByZXR1cm4gY29weTsKICB9OwoKICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IHdpdGhvdXQgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuCiAgXy5vbWl0ID0gZnVuY3Rpb24ob2JqKSB7CiAgICB2YXIgY29weSA9IHt9OwogICAgdmFyIGtleXMgPSBjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTsKICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgaWYgKCFfLmNvbnRhaW5zKGtleXMsIGtleSkpIGNvcHlba2V5XSA9IG9ialtrZXldOwogICAgfQogICAgcmV0dXJuIGNvcHk7CiAgfTsKCiAgLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy4KICBfLmRlZmF1bHRzID0gZnVuY3Rpb24ob2JqKSB7CiAgICBlYWNoKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24oc291cmNlKSB7CiAgICAgIGlmIChzb3VyY2UpIHsKICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkgewogICAgICAgICAgaWYgKG9ialtwcm9wXSA9PSBudWxsKSBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LgogIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHsKICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqOwogICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTsKICB9OwoKICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouCiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byAidGFwIGludG8iIGEgbWV0aG9kIGNoYWluLCBpbgogIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLgogIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikgewogICAgaW50ZXJjZXB0b3Iob2JqKTsKICAgIHJldHVybiBvYmo7CiAgfTsKCiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC4KICB2YXIgZXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykgewogICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLgogICAgLy8gU2VlIHRoZSBIYXJtb255IGBlZ2FsYCBwcm9wb3NhbDogaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsLgogICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09IDEgLyBiOwogICAgLy8gQSBzdHJpY3QgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkgYmVjYXVzZSBgbnVsbCA9PSB1bmRlZmluZWRgLgogICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiOwogICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuCiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkOwogICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDsKICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuCiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTsKICAgIGlmIChjbGFzc05hbWUgIT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlOwogICAgc3dpdGNoIChjbGFzc05hbWUpIHsKICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuCiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6CiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGAiNSJgIGlzCiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZygiNSIpYC4KICAgICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7CiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6CiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS4gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvcgogICAgICAgIC8vIG90aGVyIG51bWVyaWMgdmFsdWVzLgogICAgICAgIHJldHVybiBhICE9ICthID8gYiAhPSArYiA6IChhID09IDAgPyAxIC8gYSA9PSAxIC8gYiA6IGEgPT0gK2IpOwogICAgICBjYXNlICdbb2JqZWN0IERhdGVdJzoKICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6CiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpcgogICAgICAgIC8vIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9ucy4gTm90ZSB0aGF0IGludmFsaWQgZGF0ZXMgd2l0aCBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMKICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuCiAgICAgICAgcmV0dXJuICthID09ICtiOwogICAgICAvLyBSZWdFeHBzIGFyZSBjb21wYXJlZCBieSB0aGVpciBzb3VyY2UgcGF0dGVybnMgYW5kIGZsYWdzLgogICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOgogICAgICAgIHJldHVybiBhLnNvdXJjZSA9PSBiLnNvdXJjZSAmJgogICAgICAgICAgICAgICBhLmdsb2JhbCA9PSBiLmdsb2JhbCAmJgogICAgICAgICAgICAgICBhLm11bHRpbGluZSA9PSBiLm11bHRpbGluZSAmJgogICAgICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT0gYi5pZ25vcmVDYXNlOwogICAgfQogICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7CiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljCiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC4KICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoOwogICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZgogICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuCiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PSBhKSByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT0gYjsKICAgIH0KICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy4KICAgIGFTdGFjay5wdXNoKGEpOwogICAgYlN0YWNrLnB1c2goYik7CiAgICB2YXIgc2l6ZSA9IDAsIHJlc3VsdCA9IHRydWU7CiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy4KICAgIGlmIChjbGFzc05hbWUgPT0gJ1tvYmplY3QgQXJyYXldJykgewogICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS4KICAgICAgc2l6ZSA9IGEubGVuZ3RoOwogICAgICByZXN1bHQgPSBzaXplID09IGIubGVuZ3RoOwogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy4KICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7CiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBlcShhW3NpemVdLCBiW3NpemVdLCBhU3RhY2ssIGJTdGFjaykpKSBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcwogICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLgogICAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7CiAgICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIChhQ3RvciBpbnN0YW5jZW9mIGFDdG9yKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc0Z1bmN0aW9uKGJDdG9yKSAmJiAoYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcikpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLgogICAgICBmb3IgKHZhciBrZXkgaW4gYSkgewogICAgICAgIGlmIChfLmhhcyhhLCBrZXkpKSB7CiAgICAgICAgICAvLyBDb3VudCB0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHByb3BlcnRpZXMuCiAgICAgICAgICBzaXplKys7CiAgICAgICAgICAvLyBEZWVwIGNvbXBhcmUgZWFjaCBtZW1iZXIuCiAgICAgICAgICBpZiAoIShyZXN1bHQgPSBfLmhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMuCiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICBmb3IgKGtleSBpbiBiKSB7CiAgICAgICAgICBpZiAoXy5oYXMoYiwga2V5KSAmJiAhKHNpemUtLSkpIGJyZWFrOwogICAgICAgIH0KICAgICAgICByZXN1bHQgPSAhc2l6ZTsKICAgICAgfQogICAgfQogICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuCiAgICBhU3RhY2sucG9wKCk7CiAgICBiU3RhY2sucG9wKCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLgogIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHsKICAgIHJldHVybiBlcShhLCBiLCBbXSwgW10pOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5PwogIC8vIEFuICJlbXB0eSIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLgogIF8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikgewogICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTsKICAgIGlmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikpIHJldHVybiBvYmoubGVuZ3RoID09PSAwOwogICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkgcmV0dXJuIGZhbHNlOwogICAgcmV0dXJuIHRydWU7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50PwogIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gISEob2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMSk7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhbiBhcnJheT8KICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheQogIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IEFycmF5XSc7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/CiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIG9iaiA9PT0gT2JqZWN0KG9iaik7CiAgfTsKCiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAuCiAgZWFjaChbJ0FyZ3VtZW50cycsICdGdW5jdGlvbicsICdTdHJpbmcnLCAnTnVtYmVyJywgJ0RhdGUnLCAnUmVnRXhwJ10sIGZ1bmN0aW9uKG5hbWUpIHsKICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7CiAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7CiAgICB9OwogIH0pOwoKICAvLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFKSwgd2hlcmUKICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgIkFyZ3VtZW50cyIgdHlwZS4KICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkgewogICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikgewogICAgICByZXR1cm4gISEob2JqICYmIF8uaGFzKG9iaiwgJ2NhbGxlZScpKTsKICAgIH07CiAgfQoKICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuCiAgaWYgKHR5cGVvZiAoLy4vKSAhPT0gJ2Z1bmN0aW9uJykgewogICAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7CiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nOwogICAgfTsKICB9CgogIC8vIElzIGEgZ2l2ZW4gb2JqZWN0IGEgZmluaXRlIG51bWJlcj8KICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTsKICB9OwoKICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuCiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBvYmogIT0gK29iajsKICB9OwoKICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj8KICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikgewogICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBCb29sZWFuXSc7CiAgfTsKCiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsPwogIF8uaXNOdWxsID0gZnVuY3Rpb24ob2JqKSB7CiAgICByZXR1cm4gb2JqID09PSBudWxsOwogIH07CgogIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkPwogIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBvYmogPT09IHZvaWQgMDsKICB9OwoKICAvLyBTaG9ydGN1dCBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHByb3BlcnR5IGRpcmVjdGx5CiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS4KICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7CiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7CiAgfTsKCiAgLy8gVXRpbGl0eSBGdW5jdGlvbnMKICAvLyAtLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBSdW4gVW5kZXJzY29yZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzCiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LgogIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkgewogICAgcm9vdC5fID0gcHJldmlvdXNVbmRlcnNjb3JlOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdG9ycy4KICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZTsKICB9OwoKICAvLyBSdW4gYSBmdW5jdGlvbiAqKm4qKiB0aW1lcy4KICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICAgIHZhciBhY2N1bSA9IEFycmF5KG4pOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGFjY3VtW2ldID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCBpKTsKICAgIHJldHVybiBhY2N1bTsKICB9OwoKICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLgogIF8ucmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHsKICAgIGlmIChtYXggPT0gbnVsbCkgewogICAgICBtYXggPSBtaW47CiAgICAgIG1pbiA9IDA7CiAgICB9CiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTsKICB9OwoKICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLgogIHZhciBlbnRpdHlNYXAgPSB7CiAgICBlc2NhcGU6IHsKICAgICAgJyYnOiAnJmFtcDsnLAogICAgICAnPCc6ICcmbHQ7JywKICAgICAgJz4nOiAnJmd0OycsCiAgICAgICciJzogJyZxdW90OycsCiAgICAgICInIjogJyYjeDI3OycsCiAgICAgICcvJzogJyYjeDJGOycKICAgIH0KICB9OwogIGVudGl0eU1hcC51bmVzY2FwZSA9IF8uaW52ZXJ0KGVudGl0eU1hcC5lc2NhcGUpOwoKICAvLyBSZWdleGVzIGNvbnRhaW5pbmcgdGhlIGtleXMgYW5kIHZhbHVlcyBsaXN0ZWQgaW1tZWRpYXRlbHkgYWJvdmUuCiAgdmFyIGVudGl0eVJlZ2V4ZXMgPSB7CiAgICBlc2NhcGU6ICAgbmV3IFJlZ0V4cCgnWycgKyBfLmtleXMoZW50aXR5TWFwLmVzY2FwZSkuam9pbignJykgKyAnXScsICdnJyksCiAgICB1bmVzY2FwZTogbmV3IFJlZ0V4cCgnKCcgKyBfLmtleXMoZW50aXR5TWFwLnVuZXNjYXBlKS5qb2luKCd8JykgKyAnKScsICdnJykKICB9OwoKICAvLyBGdW5jdGlvbnMgZm9yIGVzY2FwaW5nIGFuZCB1bmVzY2FwaW5nIHN0cmluZ3MgdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uCiAgXy5lYWNoKFsnZXNjYXBlJywgJ3VuZXNjYXBlJ10sIGZ1bmN0aW9uKG1ldGhvZCkgewogICAgX1ttZXRob2RdID0gZnVuY3Rpb24oc3RyaW5nKSB7CiAgICAgIGlmIChzdHJpbmcgPT0gbnVsbCkgcmV0dXJuICcnOwogICAgICByZXR1cm4gKCcnICsgc3RyaW5nKS5yZXBsYWNlKGVudGl0eVJlZ2V4ZXNbbWV0aG9kXSwgZnVuY3Rpb24obWF0Y2gpIHsKICAgICAgICByZXR1cm4gZW50aXR5TWFwW21ldGhvZF1bbWF0Y2hdOwogICAgICB9KTsKICAgIH07CiAgfSk7CgogIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgcHJvcGVydHkgaXMgYSBmdW5jdGlvbiB0aGVuIGludm9rZSBpdDsKICAvLyBvdGhlcndpc2UsIHJldHVybiBpdC4KICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsKICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICB2YXIgdmFsdWUgPSBvYmplY3RbcHJvcGVydHldOwogICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTsKICB9OwoKICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuCiAgXy5taXhpbiA9IGZ1bmN0aW9uKG9iaikgewogICAgZWFjaChfLmZ1bmN0aW9ucyhvYmopLCBmdW5jdGlvbihuYW1lKXsKICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdOwogICAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdOwogICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTsKICAgICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7CiAgICAgIH07CiAgICB9KTsKICB9OwoKICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnRlZ2VyIGlkICh1bmlxdWUgd2l0aGluIHRoZSBlbnRpcmUgY2xpZW50IHNlc3Npb24pLgogIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuCiAgdmFyIGlkQ291bnRlciA9IDA7CiAgXy51bmlxdWVJZCA9IGZ1bmN0aW9uKHByZWZpeCkgewogICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJzsKICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkOwogIH07CgogIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZQogIC8vIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy4KICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7CiAgICBldmFsdWF0ZSAgICA6IC88JShbXHNcU10rPyklPi9nLAogICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcc1xTXSs/KSU+L2csCiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xzXFNdKz8pJT4vZwogIH07CgogIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW4KICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzCiAgLy8gZ3VhcmFudGVlZCBub3QgdG8gbWF0Y2guCiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87CgogIC8vIENlcnRhaW4gY2hhcmFjdGVycyBuZWVkIHRvIGJlIGVzY2FwZWQgc28gdGhhdCB0aGV5IGNhbiBiZSBwdXQgaW50byBhCiAgLy8gc3RyaW5nIGxpdGVyYWwuCiAgdmFyIGVzY2FwZXMgPSB7CiAgICAiJyI6ICAgICAgIiciLAogICAgJ1xcJzogICAgICdcXCcsCiAgICAnXHInOiAgICAgJ3InLAogICAgJ1xuJzogICAgICduJywKICAgICdcdCc6ICAgICAndCcsCiAgICAnXHUyMDI4JzogJ3UyMDI4JywKICAgICdcdTIwMjknOiAndTIwMjknCiAgfTsKCiAgdmFyIGVzY2FwZXIgPSAvXFx8J3xccnxcbnxcdHxcdTIwMjh8XHUyMDI5L2c7CgogIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uCiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLAogIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLgogIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBkYXRhLCBzZXR0aW5ncykgewogICAgdmFyIHJlbmRlcjsKICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7CgogICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uCiAgICB2YXIgbWF0Y2hlciA9IG5ldyBSZWdFeHAoWwogICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSwKICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSwKICAgICAgKHNldHRpbmdzLmV2YWx1YXRlIHx8IG5vTWF0Y2gpLnNvdXJjZQogICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpOwoKICAgIC8vIENvbXBpbGUgdGhlIHRlbXBsYXRlIHNvdXJjZSwgZXNjYXBpbmcgc3RyaW5nIGxpdGVyYWxzIGFwcHJvcHJpYXRlbHkuCiAgICB2YXIgaW5kZXggPSAwOwogICAgdmFyIHNvdXJjZSA9ICJfX3ArPSciOwogICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7CiAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpCiAgICAgICAgLnJlcGxhY2UoZXNjYXBlciwgZnVuY3Rpb24obWF0Y2gpIHsgcmV0dXJuICdcXCcgKyBlc2NhcGVzW21hdGNoXTsgfSk7CgogICAgICBpZiAoZXNjYXBlKSB7CiAgICAgICAgc291cmNlICs9ICInK1xuKChfX3Q9KCIgKyBlc2NhcGUgKyAiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXG4nIjsKICAgICAgfQogICAgICBpZiAoaW50ZXJwb2xhdGUpIHsKICAgICAgICBzb3VyY2UgKz0gIicrXG4oKF9fdD0oIiArIGludGVycG9sYXRlICsgIikpPT1udWxsPycnOl9fdCkrXG4nIjsKICAgICAgfQogICAgICBpZiAoZXZhbHVhdGUpIHsKICAgICAgICBzb3VyY2UgKz0gIic7XG4iICsgZXZhbHVhdGUgKyAiXG5fX3ArPSciOwogICAgICB9CiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoOwogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9KTsKICAgIHNvdXJjZSArPSAiJztcbiI7CgogICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS4KICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xuJyArIHNvdXJjZSArICd9XG4nOwoKICAgIHNvdXJjZSA9ICJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sIiArCiAgICAgICJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xuIiArCiAgICAgIHNvdXJjZSArICJyZXR1cm4gX19wO1xuIjsKCiAgICB0cnkgewogICAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgZS5zb3VyY2UgPSBzb3VyY2U7CiAgICAgIHRocm93IGU7CiAgICB9CgogICAgaWYgKGRhdGEpIHJldHVybiByZW5kZXIoZGF0YSwgXyk7CiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgIHJldHVybiByZW5kZXIuY2FsbCh0aGlzLCBkYXRhLCBfKTsKICAgIH07CgogICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24gc291cmNlIGFzIGEgY29udmVuaWVuY2UgZm9yIHByZWNvbXBpbGF0aW9uLgogICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAoc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicpICsgJyl7XG4nICsgc291cmNlICsgJ30nOwoKICAgIHJldHVybiB0ZW1wbGF0ZTsKICB9OwoKICAvLyBBZGQgYSAiY2hhaW4iIGZ1bmN0aW9uLCB3aGljaCB3aWxsIGRlbGVnYXRlIHRvIHRoZSB3cmFwcGVyLgogIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiBfKG9iaikuY2hhaW4oKTsKICB9OwoKICAvLyBPT1AKICAvLyAtLS0tLS0tLS0tLS0tLS0KICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdAogIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlCiAgLy8gdW5kZXJzY29yZSBmdW5jdGlvbnMuIFdyYXBwZWQgb2JqZWN0cyBtYXkgYmUgY2hhaW5lZC4KCiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLgogIHZhciByZXN1bHQgPSBmdW5jdGlvbihvYmopIHsKICAgIHJldHVybiB0aGlzLl9jaGFpbiA/IF8ob2JqKS5jaGFpbigpIDogb2JqOwogIH07CgogIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC4KICBfLm1peGluKF8pOwoKICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLgogIGVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07CiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDsKICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTsKICAgICAgaWYgKChuYW1lID09ICdzaGlmdCcgfHwgbmFtZSA9PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTsKICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG9iaik7CiAgICB9OwogIH0pOwoKICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci4KICBlYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07CiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gcmVzdWx0LmNhbGwodGhpcywgbWV0aG9kLmFwcGx5KHRoaXMuX3dyYXBwZWQsIGFyZ3VtZW50cykpOwogICAgfTsKICB9KTsKCiAgXy5leHRlbmQoXy5wcm90b3R5cGUsIHsKCiAgICAvLyBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuCiAgICBjaGFpbjogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuX2NoYWluID0gdHJ1ZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEV4dHJhY3RzIHRoZSByZXN1bHQgZnJvbSBhIHdyYXBwZWQgYW5kIGNoYWluZWQgb2JqZWN0LgogICAgdmFsdWU6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDsKICAgIH0KCiAgfSk7Cgp9KS5jYWxsKHRoaXMpOwo=","selector":"response.content.text"}],"event":null,"data":null},{"request":[{"type":"table","title":"Details","tableData":[{"name":"Method","value":"GET","selector":"request.method"},{"name":"URL","value":"","selector":"request.targetUri"},{"name":"Path","value":"/doc/manual/html/_static/jquery.js","selector":"request.path"},{"name":"Body Size (bytes)","value":0,"selector":"request.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":authority","value":"localhost:3000","selector":"request.headers[\":authority\"]"},{"name":":method","value":"GET","selector":"request.headers[\":method\"]"},{"name":":path","value":"/doc/manual/html/_static/jquery.js","selector":"request.headers[\":path\"]"},{"name":":scheme","value":"http","selector":"request.headers[\":scheme\"]"},{"name":"Accept","value":"*/*","selector":"request.headers[\"Accept\"]"},{"name":"Accept-Encoding","value":"gzip, deflate","selector":"request.headers[\"Accept-Encoding\"]"},{"name":"User-Agent","value":"nghttp2/0.5.2-DEV","selector":"request.headers[\"User-Agent\"]"}],"body":""},{"type":"table","title":"Query String","tableData":null,"body":""}],"response":[{"type":"table","title":"Details","tableData":[{"name":"Status","value":200,"selector":"response.status"},{"name":"Status Text","value":"OK","selector":"response.statusText"},{"name":"Body Size (bytes)","value":337172,"selector":"response.bodySize"}],"body":""},{"type":"table","title":"Headers","tableData":[{"name":":status","value":"200","selector":"response.headers[\":status\"]"},{"name":"Cache-Control","value":"max-age=3600","selector":"response.headers[\"Cache-Control\"]"},{"name":"Content-Length","value":"337172","selector":"response.headers[\"Content-Length\"]"},{"name":"Date","value":"Sat, 02 Aug 2014 10:50:25 GMT","selector":"response.headers[\"Date\"]"},{"name":"Last-Modified","value":"Fri, 02 Aug 2013 02:20:30 GMT","selector":"response.headers[\"Last-Modified\"]"},{"name":"Server","value":"nghttpd nghttp2/0.5.2-DEV","selector":"response.headers[\"Server\"]"}],"body":""},{"type":"body","title":"Body","tableData":null,"encoding":"base64","body":"","selector":"response.content.text"}],"event":null,"data":null}]